{"ast":null,"code":"var _jsxFileName = \"/Users/seanmcavoy/nodejs_projects/MernCA_new/client/src/components/AddComment.js\";\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport axios from \"axios\";\nimport LinkInClass from \"../components/LinkInClass\";\nimport { ACCESS_LEVEL_GUEST, SERVER_HOST } from \"../config/global_constants\";\nexport default class AddComment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleFileChange = e => {\n      this.setState({\n        selectedFiles: e.target.files\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let formData = new FormData();\n      formData.append(\"id\", this.state.id);\n      formData.append(\"topic\", this.state.topic);\n      formData.append(\"body\", this.state.body);\n      axios.post(\"\".concat(SERVER_HOST, \"/comments/add_comment\"), formData, {\n        headers: {\n          \"authorization\": localStorage.token,\n          \"Content-type\": \"multipart/form-data\"\n        }\n      }).then(res => {\n        this.setState({\n          redirectToDisplayBody: true\n        });\n      }).catch(err => {\n        this.setState({\n          wasSubmittedAtLeastOnce: true\n        });\n      });\n    };\n\n    this.state = {\n      id: \"\",\n      topic: \"\",\n      body: \"\",\n      redirectToDisplayBody: localStorage.accessLevel <= ACCESS_LEVEL_GUEST,\n      wasSubmittedAtLeastOnce: false\n    };\n  }\n\n  componentDidMount() {\n    this.inputToFocus.focus();\n  }\n\n  render() {\n    let errorMessage = \"\";\n\n    if (this.state.wasSubmittedAtLeastOnce) {\n      errorMessage = React.createElement(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Error: All fields must be filled in\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"form-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.redirectToDisplayBody ? React.createElement(Redirect, {\n      to: \"/DisplayBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }) : null, errorMessage, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"id\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"TopicID\"), React.createElement(Form.Control, {\n      ref: input => {\n        this.inputToFocus = input;\n      },\n      type: \"text\",\n      name: \"id\",\n      value: this.state.id,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Comment\"), React.createElement(Form.Control, {\n      type: \"text\",\n      name: \"body\",\n      value: this.state.body,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(LinkInClass, {\n      value: \"Add\",\n      className: \"green-button\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Link, {\n      className: \"red-button\",\n      to: \"/DisplayBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Cancel\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/seanmcavoy/nodejs_projects/MernCA_new/client/src/components/AddComment.js"],"names":["React","Component","Redirect","Link","Form","axios","LinkInClass","ACCESS_LEVEL_GUEST","SERVER_HOST","AddComment","constructor","props","handleChange","e","setState","target","name","value","handleFileChange","selectedFiles","files","handleSubmit","preventDefault","formData","FormData","append","state","id","topic","body","post","headers","localStorage","token","then","res","redirectToDisplayBody","catch","err","wasSubmittedAtLeastOnce","accessLevel","componentDidMount","inputToFocus","focus","render","errorMessage","input"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport {Redirect, Link} from \"react-router-dom\"\nimport Form from \"react-bootstrap/Form\"\n\n\nimport axios from \"axios\"\n\nimport LinkInClass from \"../components/LinkInClass\"\n\nimport {ACCESS_LEVEL_GUEST, SERVER_HOST} from \"../config/global_constants\"\n\n\nexport default class AddComment extends Component\n{\n    constructor(props)\n    {\n        super(props)\n\n        this.state = {\n            id:\"\",\n            topic:\"\",\n            body:\"\",\n            redirectToDisplayBody:localStorage.accessLevel <= ACCESS_LEVEL_GUEST,\n            wasSubmittedAtLeastOnce:false\n        }\n    }\n\n\n    componentDidMount() \n    {     \n        this.inputToFocus.focus()        \n    }\n \n \n    handleChange = (e) => \n    {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n\n    handleFileChange = (e) => \n    {\n        this.setState({selectedFiles: e.target.files})\n    }\n    \n    \n    handleSubmit = (e) => \n    {\n        e.preventDefault()\n\n        let formData = new FormData()                  \n        formData.append(\"id\", this.state.id)\n        formData.append(\"topic\", this.state.topic)\n        formData.append(\"body\", this.state.body)\n        \n        \n\n        axios.post(`${SERVER_HOST}/comments/add_comment`, formData, {headers:{\"authorization\":localStorage.token, \"Content-type\": \"multipart/form-data\"}})\n        .then(res => \n        {           \n            this.setState({redirectToDisplayBody:true})\n        })\n        .catch(err =>\n        {\n            this.setState({wasSubmittedAtLeastOnce: true})\n        })\n    }\n\n\n    render()\n    {       \n        let errorMessage = \"\";\n        if(this.state.wasSubmittedAtLeastOnce)\n        {\n            errorMessage = <div className=\"error\">Error: All fields must be filled in<br/></div>;\n        }                \n    \n        return (\n            <div className=\"form-container\"> \n                {this.state.redirectToDisplayBody ? <Redirect to=\"/DisplayBody\"/> : null}                                            \n                    \n                {errorMessage}\n                \n                <Form>\n                    <Form.Group controlId=\"id\">\n                        <Form.Label>TopicID</Form.Label>\n                        <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"id\" value={this.state.id} onChange={this.handleChange} />\n                    </Form.Group>\n    \n                    <Form.Group controlId=\"body\">\n                        <Form.Label>Comment</Form.Label>\n                        <Form.Control type=\"text\" name=\"body\" value={this.state.body} onChange={this.handleChange} />\n                    </Form.Group>\n    \n                      <br/>\n            \n                    <LinkInClass value=\"Add\" className=\"green-button\" onClick={this.handleSubmit}/>            \n            \n                    <Link className=\"red-button\" to={\"/DisplayBody\"}>Cancel</Link>\n                </Form>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}